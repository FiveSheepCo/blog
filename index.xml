<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quintschaf Blog</title><link>https://blog.quintschaf.com/</link><description>Recent content on Quintschaf Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Apr 2023 18:42:00 +0200</lastBuildDate><atom:link href="https://blog.quintschaf.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing MapItemPicker</title><link>https://blog.quintschaf.com/posts/map-item-picker/</link><pubDate>Tue, 18 Apr 2023 18:42:00 +0200</pubDate><guid>https://blog.quintschaf.com/posts/map-item-picker/</guid><description>&lt;h1 id="introducing-mapitempicker-a-powerful-location-picker-for-swiftui">Introducing MapItemPicker: A Powerful Location Picker for SwiftUI&lt;/h1>
&lt;p>As an app developer, there are times when you need to create a view that allows users to find and select locations. However, Apple doesn&amp;rsquo;t provide a built-in view for this in their frameworks, and much of the information displayed in the Maps app that makes it easy to search for and discover map items is not exposed on &lt;code>MKMapItem&lt;/code>. That&amp;rsquo;s why we created &lt;strong>MapItemPicker&lt;/strong>, a simple, yet highly customizable and powerful location picker for SwiftUI that uses data from MapKit, OpenStreetMaps, and Wikidata to deliver a comprehensive map item picker experience.&lt;/p>
&lt;table>
&lt;tbody>
&lt;tr>
&lt;td style="border:none;">&lt;img style="border-radius:.25rem;" src="https://user-images.githubusercontent.com/31473326/230954413-98d3428c-69d2-4273-9d49-d0e032fb7173.png" />&lt;/td>
&lt;td style="border:none;">&lt;img style="border-radius:.25rem;" src="https://user-images.githubusercontent.com/31473326/230954579-8c47e8ce-1d57-4623-a6de-c615a0dd5c82.png" />&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="what-is-mapitempicker">What is MapItemPicker?&lt;/h2>
&lt;p>MapItemPicker is a SwiftUI library that provides an easy-to-use and customizable location picker for your app. It combines data from MapKit, OpenStreetMaps, and Wikidata to offer a beautiful and feature-rich map item picker.&lt;/p>
&lt;p>The library has built-in support for annotations and overlays, making it simple to add custom markers and lines on the map. Additionally, it provides a powerful search and filtering functionality, allowing users to quickly find the location they need.&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>To start using MapItemPicker, simply add it to your project via Swift Package Manager. Once installed, you can use the convenience method to add a simple picker to your app:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Swift" data-lang="Swift">&lt;span style="display:flex;">&lt;span>.mapItemPickerSheet(isPresented: &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>showsSheet) { mapItem &lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Map Item:&amp;#34;&lt;/span>, mapItem)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more advanced use cases, you can customize the picker using the parameters of &lt;code>MapItemPicker&lt;/code> view:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Swift" data-lang="Swift">&lt;span style="display:flex;">&lt;span>MapItemPicker(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> annotations: [MKPointAnnotation.chicago],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overlays: [MKPolyline.newYorkToLosAngeles],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> showsLocationButton: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> additionalTopRightButtons: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">init&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imageName: &lt;span style="color:#e6db74">&amp;#34;magnifyingglass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler: { searchControllerShown = &lt;span style="color:#66d9ef">true&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initialRegion: MKCoordinateRegion.unitedStates,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> standardView: { Text(&lt;span style="color:#e6db74">&amp;#34;Standard View&amp;#34;&lt;/span>) },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> searchControllerShown: &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>searchControllerShown,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> standardSearchView: { Text(&lt;span style="color:#e6db74">&amp;#34;Search View&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check out the full &lt;a href="https://github.com/Quintschaf/MapItemPicker/blob/main/README.md">README&lt;/a> for more examples and detailed usage instructions.&lt;/p>
&lt;h2 id="localization">Localization&lt;/h2>
&lt;p>MapItemPicker includes localizations for categories, titles of sections in the views, and other strings. Currently, only English and German are supported. If you can provide localization for any other language, please submit a PR. You can copy the strings from the English &lt;code>Localizable.strings&lt;/code> file at &lt;code>Sources/MapItemPicker/Resources/en.lproj&lt;/code>. It&amp;rsquo;s not a lot of localization keys, and you&amp;rsquo;ll probably be done in 5 minutes.&lt;/p>
&lt;h2 id="future-plans-and-contributions">Future Plans and Contributions&lt;/h2>
&lt;p>MapItemPicker is under active development, and there are many exciting features planned for future releases, including:&lt;/p>
&lt;ul>
&lt;li>Improved location type handling&lt;/li>
&lt;li>More data sources&lt;/li>
&lt;li>Editing opening hours and reporting back to OpenStreetMaps&lt;/li>
&lt;li>Additional filters in search&lt;/li>
&lt;li>Unit tests and UI tests&lt;/li>
&lt;li>Compiled documentation&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re interested in contributing to MapItemPicker or have any suggestions, feel free to &lt;a href="https://github.com/Quintschaf/MapItemPicker/issues">open an issue&lt;/a> or submit a pull request.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>MapItemPicker is an essential tool for developers looking to add a powerful and customizable location picker to their SwiftUI apps. With its combination of MapKit, OpenStreetMaps, and Wikidata, MapItemPicker offers a comprehensive solution that is both user-friendly and feature-rich. By integrating this library into your projects, you&amp;rsquo;ll save valuable development time and provide your users with an intuitive and enjoyable experience when searching for and selecting locations.&lt;/p>
&lt;p>Don&amp;rsquo;t hesitate to give MapItemPicker a try and take advantage of its capabilities to enhance your app&amp;rsquo;s functionality. Remember that contributions are always welcome, so feel free to join the project and help improve this fantastic tool even further.&lt;/p>
&lt;p>Happy coding!&lt;/p></description></item><item><title>Migrating from SwiftKey</title><link>https://blog.quintschaf.com/posts/migrating-from-swiftkey/</link><pubDate>Thu, 06 Oct 2022 18:08:46 +0200</pubDate><guid>https://blog.quintschaf.com/posts/migrating-from-swiftkey/</guid><description>&lt;h1 id="swiftkey-is-gone">SwiftKey is gone&lt;/h1>
&lt;p>On September 28th 2022, Microsoft announced that it would pull the popular keyboard &lt;strong>SwiftKey&lt;/strong> from Apple&amp;rsquo;s AppStore. The announcement came suddenly and without much time to react. As of October 5th 2022, SwiftKey is no longer available on the AppStore.&lt;/p>
&lt;p>If you&amp;rsquo;re one of the people impacted, you&amp;rsquo;ll now have to make a hard decision:&lt;/p>
&lt;blockquote>
&lt;p>Either keep using SwiftKey or find a new Keyboard to use.&lt;/p>
&lt;/blockquote>
&lt;p>This is a bit of a dilemma, since none of these options are good. Starting a few days ago, many people have been reporting issues with SwiftKey. Quite the coincidence that a keyboard which used to run perfectly for years is suddenly misbehaving a few days before being shut down&amp;hellip; Anyway, even if it would work fine, it&amp;rsquo;s not getting any updates and as soon as you get a new device, it&amp;rsquo;s gone.&lt;/p>
&lt;p>Now, choosing another keyboard is pretty hard. Ideally it should have a similar feature set to SwiftKey, behave similarly and be easy enough to use and customize. Just like SwiftKey, it should also be free.&lt;/p>
&lt;h2 id="mykeyboard-to-the-rescue">MyKeyboard to the rescue&lt;/h2>
&lt;blockquote>
&lt;p>It just so happens that we&amp;rsquo;re developing an app called &lt;strong>MyKeyboard&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>It has tons of features, it&amp;rsquo;s easy to use and customize, and — best of all — &lt;strong>it&amp;rsquo;s free&lt;/strong>. We do have a paid version, but you won&amp;rsquo;t need it in order to do any of the things you&amp;rsquo;re used to from SwiftKey.&lt;/p>
&lt;p>To make migration easier we have published a new version, which lets you import your custom word list from SwiftKey. That&amp;rsquo;s possible because Microsoft provides a website for downloading your data (&lt;a href="https://data.swiftkey.com">https://data.swiftkey.com&lt;/a>).&lt;/p>
&lt;p>We would&amp;rsquo;ve loved to migrate other settings too, sadly the export only includes your custom word list and nothing else that we could use to make certain changes automatically.&lt;/p>
&lt;h2 id="how-to-migrate-to-mykeyboard">How to migrate to MyKeyboard&lt;/h2>
&lt;blockquote>
&lt;p>Simply download the app from here: &lt;a href="https://apps.apple.com/app/mykeyboard-custom-keyboard/id1455404109">MyKeyboard on the AppStore&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>After installing MyKeyboard and going through the onboarding screen (which should only take up a minute of your time), simply go to the &lt;strong>Settings&lt;/strong> tab and tap on &lt;strong>Import Data from SwiftKey&lt;/strong>.&lt;/p>
&lt;p>The following screen will guide you through exporting your data from SwiftKey and importing them into MyKeyboard. It&amp;rsquo;s a very simple process and shouldn&amp;rsquo;t take up much of your time.&lt;/p>
&lt;h3 id="why-you-should-switch">Why you should switch&lt;/h3>
&lt;p>&lt;strong>We support almost all features you&amp;rsquo;re used to from SwiftKey&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Intelligent spell checking and word suggestions&lt;/li>
&lt;li>Support for number and emoji rows&lt;/li>
&lt;li>Support for quick-period and quick-ellipsis&lt;/li>
&lt;li>Support for tactile feedback, as well as typing sounds&lt;/li>
&lt;li>Quick emoji key and a native emoji picker&lt;/li>
&lt;li>Multi language support
&lt;ul>
&lt;li>UI translated into many of the most-used languages&lt;/li>
&lt;li>Regional key layouts like QWERTY, QWERTZ, AZERTY, JCUKEN, 두벌식 etc.&lt;/li>
&lt;li>Spell checking and suggestions in multiple languages at once&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Beautifully handcrafted themes&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Additionally, we have many exclusive features SwiftKey never had&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>A novel and extremely fast way of deleting words and sentences
&lt;ul>
&lt;li>Simply hold the deletion key and swipe to the left for precise deletion.&lt;/li>
&lt;li>&amp;hellip;or just use the old and boring way of deleting. We do have that too.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Swipe-down keys in the style of the iPad keyboard
&lt;ul>
&lt;li>Quick access to a second key action by swiping down on a key&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Customizable delay to trigger the long-press action&lt;/li>
&lt;li>Emoji suggestions (type fire and get 🔥 as a suggestion)&lt;/li>
&lt;li>Dedicated keyboard modes for accessibility
&lt;ul>
&lt;li>Left-handed and right-handed modes&lt;/li>
&lt;li>Split the keyboard into two by dragging from the center with two fingers&lt;/li>
&lt;li>Merge the keyboard again by dragging towards the center with both fingers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;hellip;and a lot more!&lt;/li>
&lt;/ul>
&lt;h3 id="why-you-shouldnt-switch">Why you shouldn&amp;rsquo;t switch&lt;/h3>
&lt;blockquote>
&lt;p>If you heavily rely on Swipe Typing, MyKeyboard isn&amp;rsquo;t (yet) for you.&lt;/p>
&lt;/blockquote>
&lt;p>A few features are still missing, the most important one being &lt;strong>Swipe Typing&lt;/strong>. We&amp;rsquo;re working hard on providing this feature as soon as possible, but it has proven very hard to implement correctly, especially considering MyKeyboard&amp;rsquo;s unique design (keys can be customized almost infinitely and while swiping, custom key configurations have to be taken into consideration).&lt;/p>
&lt;p>There might be a few rough edges here and there, since we&amp;rsquo;re a small company of only two people and we don&amp;rsquo;t have the same resources Microsoft has. But we&amp;rsquo;re very dedicated to our products and we&amp;rsquo;re improving MyKeyboard all the time. We&amp;rsquo;re also using MyKeyboard ourselves, so if there are any issues they&amp;rsquo;ll probably annoy us too, which is a great motivation to fix them!&lt;/p>
&lt;h2 id="about-the-pro-version">About the Pro version&lt;/h2>
&lt;p>MyKeyboard offers some advanced features for power users, which are only available in the Pro version.&lt;/p>
&lt;p>&lt;strong>Layout editor&lt;/strong>&lt;/p>
&lt;p>In the free edition, we offer the Keyboard Builder: an easy way to quickly get a nice layout going. Some advanced building blocks are paid, but they&amp;rsquo;re all pretty specific to MyKeyboard. We don&amp;rsquo;t put basic or experimental features behind a paywall.&lt;/p>
&lt;p>The layout editor available in the Pro version allows you to fully customize every aspect of the keyboard layout. You can create any layout you can think of and design spezialized keyboards for tasks that are otherwise hard to do on a phone, such as writing Markdown or Regular Expressions. Additionally, you can dive deep into key actions and customize the tap action, hold action, subkeys, sizing and more.&lt;/p>
&lt;p>&lt;strong>Theme editor&lt;/strong>&lt;/p>
&lt;p>In the free version, we offer a theme mimicking the default iOS look, a flat-design theme and a special &lt;em>Slava Ukraini&lt;/em> theme supporting the heroes fighting against the Russian invaders in Ukraine.&lt;/p>
&lt;p>We also offer a few paid theme packs, as well as a full theme editor, which includes all paid themes.&lt;/p>
&lt;p>The theme editor in the Pro version offers a fully fledged theme editor, where you can customize every aspect of the keyboard&amp;rsquo;s look and feel. From font and text size over paddings, margins and gap sizes all the way to colors, shadows, and even background images.&lt;/p>
&lt;p>&lt;strong>Getting the Pro version&lt;/strong>&lt;/p>
&lt;p>If you wanna get the Pro version directly, you can do it here: &lt;a href="https://apps.apple.com/app/mykeyboard-pro-custom-keyboard/id1562086519">MyKeyboard Pro on the AppStore&lt;/a>.&lt;/p>
&lt;p>If you already have the free version, you can unlock &lt;em>all&lt;/em> features of the Pro version as an in-app purchase. There is &lt;em>no difference&lt;/em> between the IAP version and the Pro version on the AppStore.&lt;/p></description></item><item><title>Welcome</title><link>https://blog.quintschaf.com/posts/welcome/</link><pubDate>Tue, 01 Mar 2022 22:59:30 +0100</pubDate><guid>https://blog.quintschaf.com/posts/welcome/</guid><description>&lt;h1 id="welcome-to-our-blog">Welcome to our blog!&lt;/h1>
&lt;p>We are Quintschaf, a small software engineering company from Germany.&lt;/p>
&lt;h2 id="history">History&lt;/h2>
&lt;p>In 2020, shortly after the Covid pandemic started manifesting, we (Jann and Marco) founded our company.
This was a first for both of us, there were many things to figure out — for example how to get a business bank account — and finding a way to efficiently work together over a medium-large distance across Germany. Things weren&amp;rsquo;t easy at the beginning, none of us knew how to manage multiple projects while keeping track of an always growing list of ToDos and still being able to ship well-rounded releases with a minimal amount of bugs. I&amp;rsquo;m happy to say that we&amp;rsquo;ve figured all of these things out and business is going better day by day.&lt;/p>
&lt;h3 id="9list">9List&lt;/h3>
&lt;p>The first app we released was a &amp;ldquo;smart&amp;rdquo; shopping list, called &lt;strong>9List&lt;/strong>. We worked hard on this project and we believed that this app would be incredibly helpful to many people, especially during the pandemic. The app essentially used location-based notification triggers to show shopping list items on the lock-screen upon entering a supermarket.&lt;/p>
&lt;p>People didn&amp;rsquo;t have to remove their masks to unlock their phones and we saw this as a big opportunity, especially because it took Apple a long time to release their more mask-friendly iOS updates including the &amp;ldquo;Unlock using Apple Watch&amp;rdquo; functionality.&lt;/p>
&lt;p>The app flopped, to this day we&amp;rsquo;ve made maybe 5 sales and almost nobody uses it. 9List works well and I personally still use it, but the shopping list space is incredibly saturated. We couldn&amp;rsquo;t get any real visibility on the AppStore and we didn&amp;rsquo;t have funds for marketing, so we let the app die and went back to the drafting board.&lt;/p>
&lt;h3 id="mykeyboard">MyKeyboard&lt;/h3>
&lt;p>Jann had been working on a Keyboard for iOS, called &lt;strong>OpenKeyboard&lt;/strong>. It was a very interesting project — a fully customizable keyboard. Jann had been maintaining it in his free-time, it was a pretty technical app and the user base consisted mostly of tech-savvy people who knew their way around complex software. After talking about it for a few days we decided to migrate the project to Quintschaf.&lt;/p>
&lt;p>We rewrote the app from scratch, added many more features and crafted a new user interface to make the app easy to use for the average person. We rebranded to &lt;strong>MyKeyboard&lt;/strong>, published it on the AppStore and the sales started coming in. I wouldn&amp;rsquo;t say that the app is a huge commercial success, but we have a very loyal and steadily growing user base. We&amp;rsquo;re getting feedback and feature suggestions almost daily and our users are very happy with the app, which really makes us feel that our continued effort of improving the app is worth every single minute.&lt;/p>
&lt;p>In the beginning we were focusing on iPhone only, with little consideration for iPad users. An analysis of the usage data provided by Apple showed that almost nobody was using the app on iPad anyway, so we spent our time on improving the experience on iPhone only. After a bit more than a year, this suddenly changed. We saw an influx of new iPad users and an increasing number of people contacted us directly to ask about (better) iPad support. Up to this point, the user interface was almost unusable on iPad, keyboard dimensions were weird and the whole experience just wasn&amp;rsquo;t great.&lt;/p>
&lt;p>So we sat down and started working on MyKeyboard 3. Two months and 100+ commits later, we shipped it. iPad support is great now, dimensions look and feel right, we introduced swipe-down support on keys to switch between alternate versions (like &lt;code>2&lt;/code> and &lt;code>@&lt;/code>) on the same key (similarly to the builtin iPad keyboard), and we made this feature available on iPhone too, because why not! We reworked the keyboard editor to be even more intuitive, added builtin support for more languages (Korean, Arabic, Chinese, &amp;hellip;), added both a split-screen and one-handed mode and fixed many bugs that accumulated over time.&lt;/p>
&lt;p>This whole experience has been amazing and we&amp;rsquo;re looking forward to further improving MyKeyboard.&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>While we&amp;rsquo;re committed to further improving MyKeyboard, we also got a few new ideas up our sleeves and one of them is almost ready for prime-time. Once it&amp;rsquo;s ready for the big reveal, you&amp;rsquo;ll hear about it here first! Until then, we&amp;rsquo;ve got a few more blog posts in the works that might be interesting to Swift/SwiftUI developers and people interested in the field of software architecture.&lt;/p>
&lt;p>See you soon!&lt;/p></description></item></channel></rss>